coord_map("albers",  lat0 = 45.5, lat1 = 29.5) +
labs(title = plot_title, fill = "Count")  +
scale_fill_gradient(name="Count")
#Make the counties red when their animal county is -47
red_counties <- county_subset_map[county_subset_map[[count_variables[i]]] == -47, ]
p <- p + geom_polygon(data = red_counties, aes(group = group), fill = "red")
print(p)
}
set.seed(123)
#Read in csv files
linear_model_data_sheep = read.csv("../Data/Animal Linear Model Data/linear_model_data_sheep.csv")
linear_model_data_sheep <- na.omit(linear_model_data_sheep)
#Separate data into known and unknown animal count values
training_linear_model_data_sheep = linear_model_data_sheep[linear_model_data_sheep$sheepCount != -47, ]
training_linear_model_data_sheep = training_linear_model_data_sheep[complete.cases(training_linear_model_data_sheep["State"]), ]
# Define the proportion of the data to be used for training
trainIndex <- createDataPartition(training_linear_model_data_sheep$sheepCount, p = 0.8,
list = FALSE,
times = 1)
# Create the training and testing sets
trainData <- training_linear_model_data_sheep[trainIndex,]
testData <- training_linear_model_data_sheep[-trainIndex,]
#Create the zero inflated poisson model on the training set
linear_model_sheep = zeroinfl(sheepCount ~ surroundingFarmDensity + surroundAnimalDensity + farmDensity + stateSheepFarms + stateSheepCount + surroundingPopulationDensity + populationDensity + personalIncome2022 + tavg_JAN + tavg_FEB + tavg_MAR + tavg_APR + tavg_MAY + tavg_JUN + tavg_JUL + tavg_AUG + tavg_SEP + tavg_OCT + tavg_NOV + tavg_DEC + Area..mi.2.,  dist = "poisson",  data = trainData, maxit = 1000)
#Create a table of the regression model with each coefficient
stargazer(
linear_model_sheep,
type = 'html',  # Save as HTML (or use 'latex' if preferred)
covariate.labels = c(
'Surrounding Farm Density', 'Surrounding Sheep Density', 'Farm Density', 'State Sheep Farms',
'State Sheep Count', 'Surrounding Population Density', 'Population Density', 'County Income per Capita',
'Average Temperature - January', 'Average Temperature - February', 'Average Temperature - March',
'Average Temperature - April', 'Average Temperature - May', 'Average Temperature - June',
'Average Temperature - July', 'Average Temperature - August', 'Average Temperature - September',
'Average Temperature - October', 'Average Temperature - November', 'Average Temperature - December',
'County Area'
),
out = "sheep_output.html"  # Save output as an HTML file
)
# Predict on training and test data
train_predictions <- predict(linear_model_sheep, newdata = trainData, type = "response")
test_predictions <- predict(linear_model_sheep, newdata = testData, type = "response")
# Calculate Mean Relative Absolute Error (MRAE), ignoring cases where actual value is zero
mrae <- function(actual, predicted) {
# Filter out zero actual values to prevent division by zero
non_zero_indices <- actual != 0
mean(abs((actual[non_zero_indices] - predicted[non_zero_indices]) / actual[non_zero_indices]))
}
# Recalculate MRAE
train_mrae <- mrae(trainData$sheepCount, train_predictions)
test_mrae <- mrae(testData$sheepCount, test_predictions)
# Print the MRAE for both training and test sets
cat("Training MRAE:", train_mrae, "\n")
cat("Test MRAE:", test_mrae, "\n")
#Run the model on the data for which we have no animal counts
testing_sheep_data = linear_model_data_sheep[linear_model_data_sheep$sheepCount == -47, ]
predicting_sheep_data = testing_sheep_data[ , !(names(testing_sheep_data) == "sheepCount")]
predicting_sheep_data$sheepCount = predict(linear_model_sheep, newdata = predicting_sheep_data, type = "response")
predicting_sheep_data = predicting_sheep_data[complete.cases(predicting_sheep_data["State"]), ]
predicting_sheep_data
#Concatenate the predicted values back to the overall animal count dataset
concat = rbind(training_linear_model_data_sheep, predicting_sheep_data)
state_names = unique(concat$State)
#This for loop scales the predictions of the regression model to the state totals. Helps address any error present in the model
for (i in state_names){
#Separate the dataframe into the training and prediction set
temp_training_df = training_linear_model_data_sheep[training_linear_model_data_sheep$State == i, ]
temp_prediction_df = predicting_sheep_data[predicting_sheep_data$State == i, ]
state_count = temp_training_df$stateSheepCount[1]
#If the state count is not -47, scale the data of the counties to equal the count of the state
if (state_count != -47){
diff = state_count - sum(temp_training_df$sheepCount)
counties_count = sum(temp_prediction_df$sheepCount)
scaling_factor = diff / counties_count
predicting_sheep_data$sheepCount[predicting_sheep_data$State == i] =
round(predicting_sheep_data$sheepCount[predicting_sheep_data$State == i] * scaling_factor)
}
}
#Add the scaled data back to the total data set
sheep_concat = rbind(training_linear_model_data_sheep, predicting_sheep_data)
#Get a list of all the US counties
counties <- map_data("county")
counties$subregion[is.na(counties$subregion)] <- "none"
counties$subregion <- gsub(" ", "", counties$subregion)
#Concatenate the counties list with the animal count data
county_subset_map <- merge(counties, sheep_concat, sort = FALSE, by.x = c('region', 'subregion'), by.y = c('State', 'County'), all = TRUE)
na_rows <- county_subset_map[!complete.cases(county_subset_map), ]
county_subset_map_sheep <- county_subset_map[order(county_subset_map$order), ]
#Plot the map of the animal count data over the US
plot_title <- gsub("\\.", " ", count_variables["sheepCount"])
p <- ggplot(county_subset_map_sheep, aes(long, lat)) +
geom_polygon(aes(group = group, fill = get("sheepCount"))) +
geom_path(data = states, aes(long, lat, group = group), color = "black") +
coord_map("albers",  lat0 = 45.5, lat1 = 29.5) +
labs(title = "Sheep Count Filled", fill = "Count")
print(p)
set.seed(123)
#Read in csv files
linear_model_data_hog = read.csv("../Data/Animal Linear Model Data/linear_model_data_hog.csv")
linear_model_data_hog <- na.omit(linear_model_data_hog)
training_linear_model_data_hog = linear_model_data_hog[linear_model_data_hog$hogCount != -47, ]
training_linear_model_data_hog = training_linear_model_data_hog[complete.cases(training_linear_model_data_hog["State"]), ]
# Define the proportion of the data to be used for training
trainIndex <- createDataPartition(training_linear_model_data_hog$hogCount, p = 0.8,
list = FALSE,
times = 1)
# Create the training and testing sets
trainData <- training_linear_model_data_hog[trainIndex,]
testData <- training_linear_model_data_hog[-trainIndex,]
linear_model_hog = zeroinfl(hogCount ~ surroundingFarmDensity + surroundAnimalDensity + farmDensity + stateHogFarms + stateHogCount + surroundingPopulationDensity + populationDensity + personalIncome2022 + tavg_JAN + tavg_FEB + tavg_MAR + tavg_APR + tavg_MAY + tavg_JUN + tavg_JUL + tavg_AUG + tavg_SEP + tavg_OCT + tavg_NOV + tavg_DEC + Area..mi.2., data = trainData, maxit = 1000)
stargazer(
linear_model_hog,
type = 'html',  # Save as HTML (or use 'latex' if preferred)
covariate.labels = c(
'Surrounding Farm Density', 'Surrounding Hog Density', 'Farm Density', 'State Hog Farms',
'State Hog Count', 'Surrounding Population Density', 'Population Density', 'County Income per Capita',
'Average Temperature - January', 'Average Temperature - February', 'Average Temperature - March',
'Average Temperature - April', 'Average Temperature - May', 'Average Temperature - June',
'Average Temperature - July', 'Average Temperature - August', 'Average Temperature - September',
'Average Temperature - October', 'Average Temperature - November', 'Average Temperature - December',
'County Area'
),
out = "hog_output.html"  # Save output as an HTML file
)
# Predict on training and test data
train_predictions <- predict(linear_model_hog, newdata = trainData, type = "response")
test_predictions <- predict(linear_model_hog, newdata = testData, type = "response")
# Calculate Mean Absolute Error (MAE)
mae <- function(actual, predicted) {
mean(abs(actual - predicted))
}
train_mae <- mae(trainData$hogCount, train_predictions)
test_mae <- mae(testData$hogCount, test_predictions)
# Print the MAE for both training and test sets
cat("Training MAE:", train_mae, "\n")
cat("Test MAE:", test_mae, "\n")
testing_hog_data = linear_model_data_hog[linear_model_data_hog$hogCount == -47, ]
predicting_hog_data = testing_hog_data[ , !(names(testing_hog_data) == "hogCount")]
predicting_hog_data$hogCount = predict(linear_model_hog, newdata = predicting_hog_data, type = "response")
predicting_hog_data = predicting_hog_data[complete.cases(predicting_hog_data["State"]), ]
predicting_hog_data
concat = rbind(training_linear_model_data_hog, predicting_hog_data)
state_names = unique(concat$State)
for (i in state_names){
temp_training_df = training_linear_model_data_hog[training_linear_model_data_hog$State == i, ]
temp_prediction_df = predicting_hog_data[predicting_hog_data$State == i, ]
state_count = temp_training_df$stateHogCount[1]
if (state_count != -47){
diff = state_count - sum(temp_training_df$hogCount)
counties_count = sum(temp_prediction_df$hogCount)
scaling_factor = diff / counties_count
predicting_hog_data$hogCount[predicting_hog_data$State == i] =
round(predicting_hog_data$hogCount[predicting_hog_data$State == i] * scaling_factor)
}
}
hog_concat = rbind(training_linear_model_data_hog, predicting_hog_data)
counties <- map_data("county")
counties$subregion[is.na(counties$subregion)] <- "none"
counties$subregion <- gsub(" ", "", counties$subregion)
county_subset_map <- merge(counties, hog_concat, sort = FALSE, by.x = c('region', 'subregion'), by.y = c('State', 'County'), all = TRUE)
county_subset_map_hog <- county_subset_map[order(county_subset_map$order), ]
plot_title <- gsub("\\.", " ", count_variables["hogCount"])
p <- ggplot(county_subset_map_hog, aes(long, lat)) +
geom_polygon(aes(group = group, fill = get("hogCount"))) +
geom_path(data = states, aes(long, lat, group = group), color = "black") +
coord_map("albers",  lat0 = 45.5, lat1 = 29.5) +
labs(title = "hog Count Filled", fill = "Count")
print(p)
set.seed(123)
#Read in csv files
linear_model_data_broiler = read.csv("../Data/Animal Linear Model Data/linear_model_data_broiler.csv")
linear_model_data_broiler <- na.omit(linear_model_data_broiler)
training_linear_model_data_broiler = linear_model_data_broiler[linear_model_data_broiler$broilerCount != -47, ]
training_linear_model_data_broiler = training_linear_model_data_broiler[complete.cases(training_linear_model_data_broiler["State"]), ]
# Define the proportion of the data to be used for training
trainIndex <- createDataPartition(training_linear_model_data_broiler$broilerCount, p = 0.8,
list = FALSE,
times = 1)
# Create the training and testing sets
trainData <- training_linear_model_data_broiler[trainIndex,]
testData <- training_linear_model_data_broiler[-trainIndex,]
linear_model_broiler = zeroinfl(broilerCount ~ surroundingFarmDensity + surroundAnimalDensity + farmDensity + stateBroilerFarms + stateBroilerCount + surroundingPopulationDensity + populationDensity + personalIncome2022 + tavg_JAN + tavg_FEB + tavg_MAR + tavg_APR + tavg_MAY + tavg_JUN + tavg_JUL + tavg_AUG + tavg_SEP + tavg_OCT + tavg_NOV + tavg_DEC + Area..mi.2.,  data = trainData,  dist = "poisson", maxit = 1000)
stargazer(
linear_model_broiler,
type = 'html',  # Save as HTML (or use 'latex' if preferred)
covariate.labels = c(
'Surrounding Farm Density', 'Surrounding Broiler Density', 'Farm Density', 'State Broiler Farms',
'State Broiler Count', 'Surrounding Population Density', 'Population Density', 'County Income per Capita',
'Average Temperature - January', 'Average Temperature - February', 'Average Temperature - March',
'Average Temperature - April', 'Average Temperature - May', 'Average Temperature - June',
'Average Temperature - July', 'Average Temperature - August', 'Average Temperature - September',
'Average Temperature - October', 'Average Temperature - November', 'Average Temperature - December',
'County Area'
),
out = "broiler_output.html"  # Save output as an HTML file
)
# Predict on training and test data
train_predictions <- predict(linear_model_broiler, newdata = trainData, type = "response")
test_predictions <- predict(linear_model_broiler, newdata = testData, type = "response")
# Calculate Mean Absolute Error (MAE)
mae <- function(actual, predicted) {
mean(abs(actual - predicted))
}
train_mae <- mae(trainData$broilerCount, train_predictions)
test_mae <- mae(testData$broilerCount, test_predictions)
# Print the MAE for both training and test sets
cat("Training MAE:", train_mae, "\n")
cat("Test MAE:", test_mae, "\n")
testing_broiler_data = linear_model_data_broiler[linear_model_data_broiler$broilerCount == -47, ]
predicting_broiler_data = testing_broiler_data[ , !(names(testing_broiler_data) == "broilerCount")]
predicting_broiler_data$broilerCount = predict(linear_model_broiler, newdata = predicting_broiler_data, type = "response")
predicting_broiler_data = predicting_broiler_data[complete.cases(predicting_broiler_data["State"]), ]
predicting_broiler_data
concat = rbind(training_linear_model_data_broiler, predicting_broiler_data)
state_names = unique(concat$State)
for (i in state_names){
temp_training_df = training_linear_model_data_broiler[training_linear_model_data_broiler$State == i, ]
temp_prediction_df = predicting_broiler_data[predicting_broiler_data$State == i, ]
state_count = temp_training_df$stateBroilerCount[1]
if (state_count != -47){
diff = state_count - sum(temp_training_df$broilerCount)
counties_count = sum(temp_prediction_df$broilerCount)
scaling_factor = diff / counties_count
predicting_broiler_data$broilerCount[predicting_broiler_data$State == i] =
round(predicting_broiler_data$broilerCount[predicting_broiler_data$State == i] * scaling_factor)
}
}
broiler_concat = rbind(training_linear_model_data_broiler, predicting_broiler_data)
counties <- map_data("county")
counties$subregion[is.na(counties$subregion)] <- "none"
counties$subregion <- gsub(" ", "", counties$subregion)
county_subset_map <- merge(counties, broiler_concat, sort = FALSE, by.x = c('region', 'subregion'), by.y = c('State', 'County'), all = TRUE)
county_subset_map_broiler <- county_subset_map[order(county_subset_map$order), ]
plot_title <- gsub("\\.", " ", count_variables["broilerCount"])
p <- ggplot(county_subset_map_broiler, aes(long, lat)) +
geom_polygon(aes(group = group, fill = get("broilerCount"))) +
geom_path(data = states, aes(long, lat, group = group), color = "black") +
coord_map("albers",  lat0 = 45.5, lat1 = 29.5) +
labs(title = "broiler Count Filled", fill = "Count")
print(p)
set.seed(123)
#Read in csv files
linear_model_data_layer = read.csv("../Data/Animal Linear Model Data/linear_model_data_layer.csv")
linear_model_data_layer <- na.omit(linear_model_data_layer)
training_linear_model_data_layer = linear_model_data_layer[linear_model_data_layer$layerCount != -47, ]
training_linear_model_data_layer = training_linear_model_data_layer[complete.cases(training_linear_model_data_layer["State"]), ]
# Define the proportion of the data to be used for training
trainIndex <- createDataPartition(training_linear_model_data_layer$layerCount, p = 0.8,
list = FALSE,
times = 1)
# Create the training and testing sets
trainData <- training_linear_model_data_layer[trainIndex,]
testData <- training_linear_model_data_layer[-trainIndex,]
linear_model_layer = zeroinfl(layerCount ~ surroundingFarmDensity + surroundAnimalDensity + farmDensity + stateLayerFarms + stateLayerCount + surroundingPopulationDensity + populationDensity + personalIncome2022 + tavg_JAN + tavg_FEB + tavg_MAR + tavg_APR + tavg_MAY + tavg_JUN + tavg_JUL + tavg_AUG + tavg_SEP + tavg_OCT + tavg_NOV + tavg_DEC + Area..mi.2., dist = "poisson", data = training_linear_model_data_layer, maxit = 1000)
stargazer(
linear_model_layer,
type = 'html',  # Save as HTML (or use 'latex' if preferred)
covariate.labels = c(
'Surrounding Farm Density', 'Surrounding Layer Density', 'Farm Density', 'State Layer Farms',
'State Layer Count', 'Surrounding Population Density', 'Population Density', 'County Income per Capita',
'Average Temperature - January', 'Average Temperature - February', 'Average Temperature - March',
'Average Temperature - April', 'Average Temperature - May', 'Average Temperature - June',
'Average Temperature - July', 'Average Temperature - August', 'Average Temperature - September',
'Average Temperature - October', 'Average Temperature - November', 'Average Temperature - December',
'County Area'
),
out = "layer_output.html"  # Save output as an HTML file
)
# Predict on training and test data
train_predictions <- predict(linear_model_layer, newdata = trainData, type = "response")
test_predictions <- predict(linear_model_layer, newdata = testData, type = "response")
# Calculate Mean Absolute Error (MAE)
mae <- function(actual, predicted) {
mean(abs(actual - predicted))
}
train_mae <- mae(trainData$layerCount, train_predictions)
test_mae <- mae(testData$layerCount, test_predictions)
# Print the MAE for both training and test sets
cat("Training MAE:", train_mae, "\n")
cat("Test MAE:", test_mae, "\n")
testing_layer_data = linear_model_data_layer[linear_model_data_layer$layerCount == -47, ]
predicting_layer_data = testing_layer_data[ , !(names(testing_layer_data) == "layerCount")]
predicting_layer_data$layerCount = predict(linear_model_layer, newdata = predicting_layer_data, type = "response")
predicting_layer_data = predicting_layer_data[complete.cases(predicting_layer_data["State"]), ]
predicting_layer_data
concat = rbind(training_linear_model_data_layer, predicting_layer_data)
state_names = unique(concat$State)
for (i in state_names){
temp_training_df = training_linear_model_data_layer[training_linear_model_data_layer$State == i, ]
temp_prediction_df = predicting_layer_data[predicting_layer_data$State == i, ]
state_count = temp_training_df$stateLayerCount[1]
if (state_count != -47){
diff = state_count - sum(temp_training_df$layerCount)
counties_count = sum(temp_prediction_df$layerCount)
scaling_factor = diff / counties_count
predicting_layer_data$layerCount[predicting_layer_data$State == i] =
round(predicting_layer_data$layerCount[predicting_layer_data$State == i] * scaling_factor)
}
}
layer_concat = rbind(training_linear_model_data_layer, predicting_layer_data)
counties <- map_data("county")
counties$subregion[is.na(counties$subregion)] <- "none"
counties$subregion <- gsub(" ", "", counties$subregion)
county_subset_map <- merge(counties, layer_concat, sort = FALSE, by.x = c('region', 'subregion'), by.y = c('State', 'County'), all = TRUE)
county_subset_map_layer <- county_subset_map[order(county_subset_map$order), ]
plot_title <- gsub("\\.", " ", count_variables["layerCount"])
p <- ggplot(county_subset_map_layer, aes(long, lat)) +
geom_polygon(aes(group = group, fill = get("layerCount"))) +
geom_path(data = states, aes(long, lat, group = group), color = "black") +
coord_map("albers",  lat0 = 45.5, lat1 = 29.5) +
labs(title = "layer Count Filled", fill = "Count")
print(p)
#Read in csv files
linear_model_data_cattle = read.csv("../Data/Animal Linear Model Data/linear_model_data_cattle.csv")
linear_model_data_cattle <- na.omit(linear_model_data_cattle)
cattle_concat = linear_model_data_cattle
counties <- map_data("county")
counties$subregion[is.na(counties$subregion)] <- "none"
counties$subregion <- gsub(" ", "", counties$subregion)
county_subset_map <- merge(counties, linear_model_data_cattle, sort = FALSE, by.x = c('region', 'subregion'), by.y = c('State', 'County'), all = TRUE)
county_subset_map_cattle <- county_subset_map[order(county_subset_map$order), ]
plot_title <- gsub("\\.", " ", count_variables["cattleCount"])
p <- ggplot(county_subset_map_cattle, aes(long, lat)) +
geom_polygon(aes(group = group, fill = get("cattleCount"))) +
geom_path(data = states, aes(long, lat, group = group), color = "black") +
coord_map("albers",  lat0 = 45.5, lat1 = 29.5) +
labs(title = "cattle Count Filled", fill = "Count")
print(p)
View(layer_concat)
concat_total <- data.frame(
totalCount = rowSums(cbind(
concat_sheep$sheepCount,
concat_hog$hogCount,
concat_broiler$broilerCount,
concat_layer$layerCount,
concat_cattle$cattleCount
))
)
concat_total <- data.frame(
totalCount = rowSums(cbind(
sheep_concat$sheepCount,
hog_concat$hogCount,
broiler_concat$broilerCount,
layer_concat$layerCount,
cattle_concat$cattleCount
))
)
# View the result
print(concat_total)
dfs <- list(
sheep_concat %>% rename(animalCount = sheepCount),
hog_concat %>% rename(animalCount = hogCount),
broiler_concat %>% rename(animalCount = broilerCount),
layer_concat %>% rename(animalCount = layerCount),
cattle_concat %>% rename(animalCount = cattleCount)
)
# Combining all dataframes
combined_df <- bind_rows(dfs)
# Summing counts by state and county
concat_total <- combined_df %>%
group_by(state, county) %>%
summarise(totalCount = sum(animalCount), .groups = "drop")
dfs <- list(
sheep_concat %>% rename(animalCount = sheepCount),
hog_concat %>% rename(animalCount = hogCount),
broiler_concat %>% rename(animalCount = broilerCount),
layer_concat %>% rename(animalCount = layerCount),
cattle_concat %>% rename(animalCount = cattleCount)
)
# Combining all dataframes
combined_df <- bind_rows(dfs)
# Summing counts by state and county
concat_total <- combined_df %>%
group_by(State, County) %>%
summarise(totalCount = sum(animalCount), .groups = "drop")
View(concat_total)
View(sheep_concat)
View(hog_concat)
View(broiler_concat)
View(broiler_concat)
View(cattle_concat)
View(layer_concat)
959+14847+701+161+85
View(combined_df)
dfs <- list(
sheep_concat %>% rename(animalCount = sheepCount),
hog_concat %>% rename(animalCount = hogCount),
broiler_concat %>% rename(animalCount = broilerCount),
layer_concat %>% rename(animalCount = layerCount),
cattle_concat %>% rename(animalCount = cattleCount)
)
sheep_concat_total = dplyr::select(sheep_concat, "State", "County", "sheepCount")
hog_concat_total = dplyr::select(hog_concat, "State", "County", "hogCount")
broiler_concat_total = dplyr::select(broiler_concat, "State", "County", "broilerCount")
layer_concat_total = dplyr::select(layer_concat, "State", "County", "layerCount")
cattle_concat_total = dplyr::select(cattle_concat, "State", "County", "cattleCount")
dfs <- list(
sheep_concat_total %>% rename(animalCount = sheepCount),
hog_concat_total %>% rename(animalCount = hogCount),
broiler_concat_total %>% rename(animalCount = broilerCount),
layer_concat_total %>% rename(animalCount = layerCount),
cattle_concat_total %>% rename(animalCount = cattleCount)
)
# Combining all dataframes
combined_df <- bind_rows(dfs)
# Summing counts by state and county
concat_total <- combined_df %>%
group_by(State, County) %>%
summarise(totalCount = sum(animalCount), .groups = "drop")
View(concat_total)
View(combined_df)
sheep_concat_total = dplyr::select(sheep_concat, "State", "County", "sheepCount")
hog_concat_total = dplyr::select(hog_concat, "State", "County", "hogCount")
broiler_concat_total = dplyr::select(broiler_concat, "State", "County", "broilerCount")
layer_concat_total = dplyr::select(layer_concat, "State", "County", "layerCount")
cattle_concat_total = dplyr::select(cattle_concat, "State", "County", "cattleCount")
dfs <- list(
sheep_concat_total %>% rename(animalCount = sheepCount),
hog_concat_total %>% rename(animalCount = hogCount),
broiler_concat_total %>% rename(animalCount = broilerCount),
layer_concat_total %>% rename(animalCount = layerCount),
cattle_concat_total %>% rename(animalCount = cattleCount)
)
# Combining all dataframes
merged_df <- merge(sheep_concat_total, hog_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merge(merged_df, broiler_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merge(merged_df, layer_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merge(merged_df, cattle_concat_total, by = c("State", "County"), all = TRUE)
# Summing counts by state and county
View(merged_df)
View(hog_concat_total)
sheep_concat_total = dplyr::select(sheep_concat, "State", "County", "sheepCount")
hog_concat_total = dplyr::select(hog_concat, "State", "County", "hogCount")
broiler_concat_total = dplyr::select(broiler_concat, "State", "County", "broilerCount")
layer_concat_total = dplyr::select(layer_concat, "State", "County", "layerCount")
cattle_concat_total = dplyr::select(cattle_concat, "State", "County", "cattleCount")
dfs <- list(
sheep_concat_total %>% rename(animalCount = sheepCount),
hog_concat_total %>% rename(animalCount = hogCount),
broiler_concat_total %>% rename(animalCount = broilerCount),
layer_concat_total %>% rename(animalCount = layerCount),
cattle_concat_total %>% rename(animalCount = cattleCount)
)
# Combining all dataframes
merged_df <- merge(sheep_concat_total, hog_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merge(merged_df, broiler_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merge(merged_df, layer_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merge(merged_df, cattle_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merged_df %>%
mutate(
weighted_sheep = sheepCount * 0.2,
weighted_hog = hogCount * 0.4,
weighted_chickens = (broilerCount + layerCount) * 0.008,
weighted_cattle = cattleCount  # Cattle count remains unchanged (no weight given)
)
View(merged_df)
counties <- map_data("county")
counties$subregion[is.na(counties$subregion)] <- "none"
counties$subregion <- gsub(" ", "", counties$subregion)
county_subset_map <- merge(counties, merged_df, sort = FALSE, by.x = c('region', 'subregion'), by.y = c('State', 'County'), all = TRUE)
counties <- map_data("county")
counties$subregion[is.na(counties$subregion)] <- "none"
counties$subregion <- gsub(" ", "", counties$subregion)
county_subset_map <- merge(counties, merged_df, sort = FALSE, by.x = c('region', 'subregion'), by.y = c('State', 'County'), all = TRUE)
county_subset_map_cattle <- county_subset_map[order(county_subset_map$order), ]
plot_title <- gsub("\\.", " ", count_variables["totalCount"])
p <- ggplot(county_subset_map_cattle, aes(long, lat)) +
geom_polygon(aes(group = group, fill = get("totalCount"))) +
geom_path(data = states, aes(long, lat, group = group), color = "black") +
coord_map("albers",  lat0 = 45.5, lat1 = 29.5) +
labs(title = "Animal Count Filled", fill = "Count")
print(p)
sheep_concat_total = dplyr::select(sheep_concat, "State", "County", "sheepCount")
hog_concat_total = dplyr::select(hog_concat, "State", "County", "hogCount")
broiler_concat_total = dplyr::select(broiler_concat, "State", "County", "broilerCount")
layer_concat_total = dplyr::select(layer_concat, "State", "County", "layerCount")
cattle_concat_total = dplyr::select(cattle_concat, "State", "County", "cattleCount")
dfs <- list(
sheep_concat_total %>% rename(animalCount = sheepCount),
hog_concat_total %>% rename(animalCount = hogCount),
broiler_concat_total %>% rename(animalCount = broilerCount),
layer_concat_total %>% rename(animalCount = layerCount),
cattle_concat_total %>% rename(animalCount = cattleCount)
)
# Combining all dataframes
merged_df <- merge(sheep_concat_total, hog_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merge(merged_df, broiler_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merge(merged_df, layer_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merge(merged_df, cattle_concat_total, by = c("State", "County"), all = TRUE)
merged_df <- merged_df %>%
mutate(
weighted_sheep = sheepCount * 0.2,
weighted_hog = hogCount * 0.4,
weighted_chickens = (broilerCount + layerCount) * 0.008,
weighted_cattle = cattleCount  # Cattle count remains unchanged (no weight given)
)
merged_df$totalCount <- rowSums(
merged_df[, c("weighted_sheep", "weighted_hog", "weighted_chickens", "weighted_cattle")],
na.rm = TRUE
)
counties <- map_data("county")
counties$subregion[is.na(counties$subregion)] <- "none"
counties$subregion <- gsub(" ", "", counties$subregion)
county_subset_map <- merge(counties, merged_df, sort = FALSE, by.x = c('region', 'subregion'), by.y = c('State', 'County'), all = TRUE)
county_subset_map_cattle <- county_subset_map[order(county_subset_map$order), ]
plot_title <- gsub("\\.", " ", count_variables["totalCount"])
p <- ggplot(county_subset_map_cattle, aes(long, lat)) +
geom_polygon(aes(group = group, fill = get("totalCount"))) +
geom_path(data = states, aes(long, lat, group = group), color = "black") +
coord_map("albers",  lat0 = 45.5, lat1 = 29.5) +
labs(title = "Animal Count Filled", fill = "Count")
print(p)
